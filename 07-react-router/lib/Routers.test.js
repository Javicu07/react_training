import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from"react/jsx-runtime";import{describe,it,expect,beforeEach,vi}from"vitest";import{render,screen,cleanup,fireEvent}from"@testing-library/react";import{Routers}from"./Routers.jsx";import{getCurrentPath}from"./utils.js";import{Link}from"./Link.jsx";import{Route}from"./Route.jsx";vi.mock("./utils.js",()=>({getCurrentPath:vi.fn()}));describe("Routers",()=>{beforeEach(()=>{cleanup();vi.clearAllMocks()});it("should render whitout problems",()=>{render(_jsx(Routers,{routes:[]}));expect(true).toBeTruthy()});it("should render 404 if no routes match",()=>{render(_jsx(Routers,{routes:[],defaultComponent:()=>_jsx("h1",{children:"404"})}));expect(screen.getByText("404")).toBeTruthy()});it("should render the component of the first route that matches",()=>{getCurrentPath.mockReturnValue("/about");const routes=[{path:"/",Component:()=>_jsx("h1",{children:"Home"})},{path:"/about",Component:()=>_jsx("h1",{children:"About"})}];render(_jsx(Routers,{routes:routes}));expect(screen.getByText("About")).toBeTruthy()});it("should navigate using links",async()=>{getCurrentPath.mockReturnValueOnce("/");render(_jsxs(Routers,{children:[_jsx(Route,{path:"/",Component:()=>{return _jsxs(_Fragment,{children:[_jsx("h1",{children:"Home"}),_jsx(Link,{to:"/about",children:"Go To About"})]})}}),_jsx(Route,{path:"/about",Component:()=>_jsx("h1",{children:"About"})})]}));const button=screen.getByText(/Go To About/);fireEvent.click(button);const aboutTitle=await screen.findByText("About");expect(aboutTitle).toBeTruthy()})});